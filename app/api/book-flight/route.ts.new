import { NextResponse } from 'next/server';
import { 
  createPayment, 
  confirmPayment, 
  createOrder,
  PassengerDetails,
  Gender,
  PaymentRequest
} from '@/lib/duffel';

// Helper to validate required fields
function validatePassenger(passenger: any, index: number): { isValid: boolean; error?: string } {
  const requiredFields = [
    'title',
    'firstName',
    'lastName',
    'dateOfBirth',
    'gender',
    'email',
    'phone',
    'documentNumber',
    'documentExpiryDate',
    'documentIssuingCountryCode',
    'documentNationality'
  ];

  for (const field of requiredFields) {
    if (!passenger[field]) {
      return { 
        isValid: false, 
        error: `Passenger ${index + 1} is missing required field: ${field}` 
      };
    }
  }

  // Validate gender
  if (!['f', 'm', 'x'].includes(passenger.gender.toLowerCase())) {
    return {
      isValid: false,
      error: `Passenger ${index + 1} has invalid gender. Must be 'f', 'm', or 'x'`
    };
  }

  return { isValid: true };
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { 
      offerId, 
      passengers, 
      paymentMethod, 
      paymentIntentId,
      isConfirming = false
    } = body;

    // Validate offer ID
    if (!offerId) {
      return NextResponse.json(
        { success: false, error: 'Offer ID is required' },
        { status: 400 }
      );
    }

    // Validate passengers
    if (!passengers || !Array.isArray(passengers) || passengers.length === 0) {
      return NextResponse.json(
        { success: false, error: 'At least one passenger is required' },
        { status: 400 }
      );
    }

    // Validate each passenger
    for (let i = 0; i < passengers.length; i++) {
      const validation = validatePassenger(passengers[i], i);
      if (!validation.isValid) {
        return NextResponse.json(
          { success: false, error: validation.error },
          { status: 400 }
        );
      }
    }

    // Format passengers for our internal use
    const formattedPassengers: PassengerDetails[] = passengers.map(passenger => ({
      title: passenger.title,
      firstName: passenger.firstName,
      lastName: passenger.lastName,
      dateOfBirth: passenger.dateOfBirth,
      gender: passenger.gender.toLowerCase() as Gender,
      email: passenger.email,
      phone: passenger.phone,
      documentNumber: passenger.documentNumber,
      documentExpiryDate: passenger.documentExpiryDate,
      documentIssuingCountryCode: passenger.documentIssuingCountryCode,
      documentNationality: passenger.documentNationality,
      documentType: passenger.documentType || 'passport'
    }));

    // Create metadata for tracking
    const metadata = {
      bookingReference: `BOOK-${Date.now()}`,
      source: 'where2-web',
      environment: process.env.NODE_ENV || 'development',
      timestamp: new Date().toISOString()
    };

    // If this is a payment confirmation request
    if (isConfirming && paymentIntentId && paymentMethod) {
      // Step 2: Confirm the payment
      const confirmResponse = await confirmPayment(paymentIntentId, paymentMethod.id);
      
      if (!confirmResponse.success) {
        return NextResponse.json({
          success: false,
          error: confirmResponse.error || 'Payment confirmation failed',
          requiresAction: confirmResponse.requiresAction,
          status: confirmResponse.status
        });
      }

      // If payment requires additional action (3D Secure)
      if (confirmResponse.requiresAction) {
        return NextResponse.json({
          success: false,
          requiresAction: true,
          clientSecret: confirmResponse.clientSecret,
          paymentIntentId: confirmResponse.paymentIntentId,
          status: confirmResponse.status,
          message: 'Additional authentication required'
        });
      }

      // If payment succeeded, create the order
      if (confirmResponse.status === 'succeeded' && confirmResponse.paymentIntent) {
        // Step 3: Create the order
        const orderResponse = await createOrder(
          [offerId],
          formattedPassengers,
          paymentIntentId,
          {
            ...metadata,
            payment_intent_id: paymentIntentId
          }
        );

        if (!orderResponse.success) {
          console.error('Order creation failed:', orderResponse.error);
          return NextResponse.json({
            success: false,
            error: orderResponse.error || 'Order creation failed',
            status: 'order_failed'
          });
        }

        // Success! Return the order details
        return NextResponse.json({
          success: true,
          order: orderResponse.order,
          paymentIntent: confirmResponse.paymentIntent,
          status: 'completed',
          bookingReference: metadata.bookingReference
        });
      }

      // Handle other statuses
      return NextResponse.json({
        success: false,
        error: `Unexpected payment status: ${confirmResponse.status}`,
        status: confirmResponse.status || 'unknown'
      });
    }

    // If this is a new payment intent request
    if (!isConfirming) {
      // Create payment request (without card details)
      const paymentRequest: PaymentRequest = {
        type: 'balance',
        amount: '0', // Will be set by the API
        currency: 'EUR',
        order_id: `order_${Date.now()}`,
        card_details: paymentMethod
      };

      // Step 1: Create payment intent
      const paymentIntentResponse = await createPayment(
        offerId,
        paymentRequest,
        formattedPassengers,
        metadata
      );

      if (!paymentIntentResponse.success) {
        console.error('Payment intent creation failed:', paymentIntentResponse.error);
        return NextResponse.json({
          success: false,
          error: paymentIntentResponse.error || 'Failed to create payment intent',
          status: 'payment_intent_failed'
        });
      }

      // Return the client secret to the client for payment collection
      return NextResponse.json({
        success: true,
        requiresClientAction: paymentIntentResponse.requiresClientAction,
        clientSecret: paymentIntentResponse.clientSecret,
        paymentIntentId: paymentIntentResponse.paymentIntentId,
        status: paymentIntentResponse.status || 'requires_payment_method'
      });
    }

    // If we get here, the request is malformed
    return NextResponse.json(
      { success: false, error: 'Invalid request parameters' },
      { status: 400 }
    );

  } catch (error) {
    console.error('Error in book-flight API:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'An unexpected error occurred',
        status: 'error'
      },
      { status: 500 }
    );
  }
}
