"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { FiArrowLeft, FiCheckCircle } from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion";
import PassengerForm from '@/app/components/PassengerForm';
import { FlightItineraryCard } from "@/app/components/FlightItineraryCard";

// Import the airports data
const airports = require('airports-json').airports;

interface PassengerInfo {
  title: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  gender: '' | 'male' | 'female' | 'other';
  email: string;
  phone: string;
  passportNumber: string;
  nationality: string;
  passportExpiry: string;
  frequentFlyerNumber: string;
  specialAssistance: boolean;
}

interface BookingData {
  trip: any;
  searchParams: {
    tripType: string;
    departureDate: string;
    returnDate?: string;
    travelers: number;
    from: string;
    to: string;
  };
  budget: string;
}

const BookingPage: React.FC = () => {
  const router = useRouter();
  const [step, setStep] = useState<number>(0);
  const [bookingData, setBookingData] = useState<BookingData | null>(null);
  const [flightLoading, setFlightLoading] = useState<boolean>(true);
  const [flightError, setFlightError] = useState<string | null>(null);
  const [passengerData, setPassengerData] = useState<PassengerInfo[]>([]);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [confirmation, setConfirmation] = useState<string | null>(null);

  // Initialize booking data and passenger info
  useEffect(() => {
    try {
      const stored = localStorage.getItem('current_booking_offer');
      if (stored) {
        const data = JSON.parse(stored) as BookingData;
        setBookingData(data);
        
        // Initialize passenger data based on number of travelers
        const travelers = data?.searchParams?.travelers || 1;
        setPassengerData(Array(travelers).fill(0).map(() => ({
          title: 'mr',
          firstName: "",
          lastName: "",
          dateOfBirth: "",
          gender: '',
          email: "",
          phone: "",
          passportNumber: "",
          nationality: "",
          passportExpiry: "",
          frequentFlyerNumber: "",
          specialAssistance: false,
        })));
      }
    } catch (e) {
      setFlightError('Failed to load booking data.');
    } finally {
      setFlightLoading(false);
    }
  }, []);

  // Handle passenger info changes
  const handlePassengerChange = (index: number, field: keyof PassengerInfo, value: string | boolean) => {
    setPassengerData(prev => {
      const updated = [...prev];
      updated[index] = { ...updated[index], [field]: value };
      return updated;
    });
  };

  // Handle booking submission
  const handleSubmit = async () => {
    setSubmitting(true);
    setError(null);
    
    try {
      // Validate all required fields
      const requiredFields: (keyof PassengerInfo)[] = [
        'title', 'firstName', 'lastName', 'dateOfBirth', 'gender',
        'email', 'phone', 'passportNumber', 'nationality', 'passportExpiry'
      ];

      for (let i = 0; i < passengerData.length; i++) {
        const passenger = passengerData[i];
        for (const field of requiredFields) {
          if (!passenger[field]) {
            throw new Error(`Please fill in all required fields for passenger ${i + 1}`);
          }
        }
      }

      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Save booking
      const bookingId = `BOOK-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;
      localStorage.setItem('last_booking', JSON.stringify({
        id: bookingId,
        trip: bookingData?.trip,
        passengers: passengerData,
        date: new Date().toISOString(),
        status: 'confirmed'
      }));
      
      setConfirmation(bookingId);
      router.push(`/confirmation?bookingId=${bookingId}`);
    } catch (err: any) {
      setError(err.message || 'Failed to complete booking. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  // Render loading state
  if (flightLoading) {
    return (
      <div className="min-h-screen bg-[#FFFDF6] flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-orange-500"></div>
      </div>
    );
  }

  // Render error state
  if (flightError || !bookingData) {
    return (
      <div className="min-h-screen bg-[#FFFDF6] flex items-center justify-center p-4">
        <div className="bg-white p-8 rounded-xl shadow-md max-w-md w-full text-center">
          <div className="text-red-500 text-5xl mb-4">âœ•</div>
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Booking Error</h1>
          <p className="text-gray-600 mb-6">
            {flightError || 'Unable to load booking details. Please try again.'}
          </p>
          <button
            onClick={() => router.push('/')}
            className="w-full bg-orange-500 text-white py-3 px-6 rounded-lg font-medium hover:bg-orange-600 transition-colors"
          >
            Back to Home
          </button>
        </div>
      </div>
    );
  }

  const { trip, searchParams } = bookingData;
  const hasReturnFlight = searchParams.tripType === 'roundtrip' && trip?.itineraries?.[1];

  return (
    <div className="min-h-screen bg-[#FFFDF6] p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="mb-8">
          <button
            onClick={() => router.back()}
            className="flex items-center text-orange-500 hover:text-orange-600 transition-colors mb-6"
          >
            <FiArrowLeft className="mr-2" /> Back to results
          </button>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Complete Your Booking</h1>
          <p className="text-gray-600">Review your flight details and enter passenger information</p>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Left side - Flight Itinerary */}
          <div className="lg:w-2/3">
            <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-6">Your Flight Itinerary</h2>
              
              {/* Outbound Flight */}
              {trip?.itineraries?.[0] && (
                <div className="mb-8">
                  <div className="flex items-center mb-4">
                    <h3 className="text-lg font-semibold text-gray-700">Outbound Flight</h3>
                    <span className="ml-4 text-sm text-gray-500">
                      {new Date(searchParams.departureDate).toLocaleDateString('en-US', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  <FlightItineraryCard 
                    itinerary={trip.itineraries[0]} 
                    type="outbound"
                    date={searchParams.departureDate}
                    price={trip.price}
                    airports={airports}
                  />
                </div>
              )}

              {/* Return Flight */}
              {hasReturnFlight && trip?.itineraries?.[1] && (
                <div className="mt-10">
                  <div className="flex items-center mb-4">
                    <h3 className="text-lg font-semibold text-gray-700">Return Flight</h3>
                    <span className="ml-4 text-sm text-gray-500">
                      {new Date(searchParams.returnDate || '').toLocaleDateString('en-US', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  <FlightItineraryCard 
                    itinerary={trip.itineraries[1]} 
                    type="return"
                    date={searchParams.returnDate}
                    price={trip.price}
                    airports={airports}
                  />
                </div>
              )}
            </div>

            {/* Passenger Information */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-6">Passenger Information</h2>
              
              {passengerData.map((passenger, index) => (
                <div key={index} className="mb-8 last:mb-0 border-b border-gray-100 pb-6 last:border-0">
                  <h3 className="text-lg font-medium text-gray-800 mb-4">
                    Passenger {index + 1} {index === 0 ? '(Main Passenger)' : ''}
                  </h3>
                  <PassengerForm
                    passenger={passenger}
                    onPassengerChange={(field, value) => handlePassengerChange(index, field, value)}
                  />
                </div>
              ))}
            </div>
          </div>

          {/* Right side - Booking Summary */}
          <div className="lg:w-1/3">
            <div className="bg-white rounded-xl shadow-sm p-6 sticky top-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Booking Summary</h2>
              
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-gray-600">Passengers:</span>
                  <span className="font-medium">{passengerData.length} {passengerData.length === 1 ? 'Passenger' : 'Passengers'}</span>
                </div>
                
                {trip?.price?.total && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Price per passenger:</span>
                    <span className="font-medium">${trip.price.total.toFixed(2)}</span>
                  </div>
                )}

                {trip?.price?.total && (
                  <div className="border-t border-gray-200 pt-4 mt-4">
                    <div className="flex justify-between text-lg font-bold">
                      <span>Total:</span>
                      <span className="text-orange-500">
                        ${(trip.price.total * passengerData.length).toFixed(2)}
                      </span>
                    </div>
                  </div>
                )}

                <button
                  onClick={handleSubmit}
                  disabled={submitting}
                  className={`w-full mt-6 py-3 px-6 rounded-lg font-medium text-white transition-colors ${
                    submitting 
                      ? 'bg-orange-400 cursor-not-allowed' 
                      : 'bg-orange-500 hover:bg-orange-600'
                  }`}
                >
                  {submitting ? 'Processing...' : 'Complete Booking'}
                </button>

                {error && (
                  <div className="mt-4 p-3 bg-red-50 text-red-600 text-sm rounded-lg">
                    {error}
                  </div>
                )}

                <div className="mt-4 text-sm text-gray-500">
                  <p className="flex items-center">
                    <FiCheckCircle className="mr-2 text-green-500" />
                    Free cancellation within 24 hours
                  </p>
                  <p className="flex items-center mt-2">
                    <FiCheckCircle className="mr-2 text-green-500" />
                    No credit card fees
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookingPage;
