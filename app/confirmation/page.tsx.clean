'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { 
  FiCheckCircle, 
  FiClock, 
  FiAlertTriangle, 
  FiUser, 
  FiMail,
  FiPhone,
  FiMapPin,
  FiArrowRight,
  FiCalendar,
  FiGlobe,
  FiInfo
} from 'react-icons/fi';

type BookingStatus = 'pending' | 'confirmed' | 'failed' | 'succeeded';

interface PassengerInfo {
  id?: string;
  type?: 'adult' | 'child' | 'infant';
  title?: string;
  firstName: string;
  lastName: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  gender?: string;
  documentNumber?: string;
  documentIssuingCountryCode?: string;
  documentNationality?: string;
}

interface Segment {
  id: string;
  origin: {
    iataCode: string;
    name: string;
    city: string;
    terminal?: string;
    at: string;
  };
  destination: {
    iataCode: string;
    name: string;
    city: string;
    terminal?: string;
    at: string;
  };
  carrierCode: string;
  number: string;
  duration: string;
  departure: string;
  arrival: string;
  cabinClass: string;
  bookingClass: string;
  operatingCarrier?: {
    iataCode: string;
    name: string;
  };
  marketingCarrier: {
    iataCode: string;
    name: string;
  };
  aircraft?: {
    code: string;
    name: string;
  };
}

interface PaymentInfo {
  status: string;
  amount: number | string;
  currency: string;
  paymentMethod: string;
  lastFour?: string;
  timestamp: string;
  paymentIntentId?: string;
}

interface BookingData {
  id?: string;
  bookingId?: string;
  bookingReference?: string;
  status: BookingStatus;
  createdAt?: string;
  totalAmount?: string | number;
  amount?: string | number;
  currency?: string;
  payment?: PaymentInfo;
  passengers?: PassengerInfo[];
  segments?: Segment[];
  order?: any;
  trip?: any;
  metadata?: Record<string, any>;
}

const formatCurrency = (amount?: number | string, currency: string = 'EUR') => {
  if (amount === undefined || amount === null) return 'N/A';
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency || 'EUR',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(numAmount);
};

const formatDate = (dateString?: string) => {
  if (!dateString) return 'N/A';
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch (e) {
    return 'Invalid date';
  }
};

const formatDuration = (minutes: number) => {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return `${hours}h ${mins}m`;
};

const LoadingSpinner = () => (
  <div className="flex justify-center items-center py-12">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
  </div>
);

export default function ConfirmationPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [booking, setBooking] = useState<BookingData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadBookingData = () => {
      try {
        const bookingId = searchParams.get('bookingId');
        const ref = searchParams.get('ref');
        const status = (searchParams.get('status') as BookingStatus) || 'pending';
        const paymentStatus = searchParams.get('paymentStatus');
        const amount = searchParams.get('amount');
        const currency = searchParams.get('currency');

        // Try to load from localStorage first
        const storedBooking = localStorage.getItem('lastBooking');
        
        if (storedBooking) {
          try {
            const parsedData = JSON.parse(storedBooking);
            
            // If URL has a bookingId, verify it matches the stored one
            if (!bookingId || parsedData.bookingId === bookingId || parsedData.id === bookingId) {
              const paymentData = {
                ...(parsedData.payment || {}),
                status: paymentStatus || parsedData.payment?.status || status,
                amount: amount || parsedData.payment?.amount || parsedData.amount || 0,
                currency: currency || parsedData.payment?.currency || parsedData.currency || 'EUR',
              };

              const bookingData = {
                ...parsedData,
                status: paymentStatus || parsedData.status || status,
                bookingId: parsedData.bookingId || parsedData.id || bookingId || `booking-${Date.now()}`,
                bookingReference: ref || parsedData.bookingReference || parsedData.order?.booking_reference || `REF-${Date.now()}`,
                totalAmount: amount || parsedData.totalAmount || parsedData.amount || paymentData.amount || 0,
                currency: currency || parsedData.currency || paymentData.currency || 'EUR',
                payment: paymentData,
                passengers: parsedData.passengers || [],
                segments: parsedData.segments || [],
                order: parsedData.order || {},
                trip: parsedData.trip || {}
              };

              console.log('Setting booking data:', bookingData);
              setBooking(bookingData);
              setLoading(false);
              return;
            }
          } catch (e) {
            console.error('Error parsing stored booking:', e);
          }
        }


        // If we have a bookingId in URL but no matching localStorage data
        if (bookingId) {
          // This would be where you'd fetch from your API
          console.log('Fetching booking details for:', bookingId);
          setError('Could not load booking details. Please check your email for confirmation.');
        } else {
          setError('No booking information found. Please check your email for confirmation or contact support.');
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error loading booking data:', err);
        setError('Failed to load booking information. Please try again later.');
        setLoading(false);
      }
    };

    loadBookingData();
  }, [searchParams]);

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return (
      <div className="min-h-screen bg-[#FFFDF6] py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
            <div className="flex">
              <div className="flex-shrink-0">
                <FiAlertTriangle className="h-5 w-5 text-red-400" aria-hidden="true" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
          <button
            onClick={() => router.push('/')}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Return to Home
          </button>
        </div>
      </div>
    );
  }

  if (!booking) {
    return (
      <div className="min-h-screen bg-[#FFFDF6] py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Booking Not Found</h1>
          <p className="text-gray-600 mb-6">We couldn't find any booking information. Please check your email for confirmation or contact support.</p>
          <button
            onClick={() => router.push('/')}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Return to Home
          </button>
        </div>
      </div>
    );
  }

  // Format payment amount with currency
  const formatAmount = (amount: string | number, currencyCode: string = 'EUR') => {
    const amountNum = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currencyCode || 'EUR',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(amountNum || 0);
  };

  // Format date and time
  const formatDateTime = (dateString: string) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Get flight segments from booking data
  const flightSegments = booking.segments || [];

  return (
    <div className="min-h-screen bg-[#FFFDF6] py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${
            booking.status === 'succeeded' || booking.status === 'confirmed' 
              ? 'bg-green-100 text-green-500' 
              : booking.status === 'pending' 
                ? 'bg-yellow-100 text-yellow-500' 
                : 'bg-red-100 text-red-500'
          }`}>
            {booking.status === 'succeeded' || booking.status === 'confirmed' ? (
              <FiCheckCircle className="text-4xl" />
            ) : booking.status === 'pending' ? (
              <FiClock className="text-4xl" />
            ) : (
              <FiAlertTriangle className="text-4xl" />
            )}
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {booking.status === 'succeeded' || booking.status === 'confirmed' 
              ? 'Booking Confirmed!'
              : booking.status === 'pending'
                ? 'Payment Processing'
                : 'Booking Issue'}
          </h1>
          <div className="space-y-2">
            <p className="text-gray-600">
              Booking reference: <span className="font-medium">{booking.bookingReference}</span>
            </p>
            {booking.status === 'succeeded' && booking.payment?.paymentIntentId && (
              <p className="text-sm text-gray-500">
                Payment ID: {booking.payment.paymentIntentId}
              </p>
            )}
          </div>
        </div>

        {/* Booking Summary */}
        <div className="bg-white rounded-xl shadow-md overflow-hidden mb-8">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Booking Summary</h2>
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-sm font-medium text-gray-500 mb-2">Booking Reference</h3>
                <p className="text-gray-900 font-mono">{booking.bookingReference}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500 mb-2">Status</h3>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  booking.status === 'confirmed' || booking.status === 'succeeded' 
                    ? 'bg-green-100 text-green-800' 
                    : booking.status === 'pending'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                </span>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500 mb-2">Booking Date</h3>
                <p className="text-gray-900">
                  {booking.createdAt ? formatDateTime(booking.createdAt) : 'N/A'}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500 mb-2">Total Amount</h3>
                <p className="text-gray-900 font-medium text-lg">
                  {formatAmount(booking.totalAmount || booking.amount || 0, booking.currency)}
                </p>
              </div>
            </div>

            {/* Payment Details */}
            {booking.payment && (
              <div className="mt-8 pt-6 border-t border-gray-100">
                <h3 className="text-md font-medium text-gray-900 mb-4">Payment Details</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Payment Status</p>
                    <p className="font-medium">
                      {booking.payment.status === 'succeeded' ? 'Paid' : booking.payment.status}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Payment Method</p>
                    <p className="font-medium">
                      {booking.payment.paymentMethod === 'card' ? 'Credit/Debit Card' : booking.payment.paymentMethod}
                      {booking.payment.lastFour && (
                        <span className="ml-2 text-gray-500">•••• {booking.payment.lastFour}</span>
                      )}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Amount Paid</p>
                    <p className="font-medium">
                      {formatAmount(booking.payment.amount || 0, booking.payment.currency)}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Paid On</p>
                    <p className="font-medium">
                      {booking.payment.timestamp ? formatDateTime(booking.payment.timestamp) : 'N/A'}
                    </p>
                  </div>
                  {booking.payment.paymentIntentId && (
                    <div className="md:col-span-2">
                      <p className="text-sm text-gray-500">Payment ID</p>
                      <p className="font-mono text-sm text-gray-600 break-all">
                        {booking.payment.paymentIntentId}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Flight Details */}
        {flightSegments.length > 0 && (
          <div className="bg-white rounded-xl shadow-md overflow-hidden mb-8">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Flight Details</h2>
            </div>
            
            <div className="divide-y divide-gray-100">
              {flightSegments.map((segment: any, index: number) => (
                <div key={`segment-${index}`} className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2">
                        <div className="text-xl font-bold text-gray-900">
                          {segment.origin?.iataCode}
                        </div>
                        <FiArrowRight className="text-gray-400" />
                        <div className="text-xl font-bold text-gray-900">
                          {segment.destination?.iataCode}
                        </div>
                        <span className="ml-2 text-sm text-gray-500">
                          {segment.carrierCode}{segment.number}
                        </span>
                      </div>
                      
                      <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <p className="text-sm font-medium text-gray-900">Departure</p>
                          <p className="text-2xl font-bold">
                            {formatDateTime(segment.departure)}
                          </p>
                          <p className="text-sm text-gray-600">
                            {segment.origin?.name}
                            {segment.origin?.terminal && ` • Terminal ${segment.origin.terminal}`}
                          </p>
                        </div>
                        
                        <div className="flex items-center justify-center">
                          <div className="text-center">
                            <div className="text-sm text-gray-500">
                              {segment.duration ? (
                                formatDuration(parseInt(segment.duration) || 0)
                              ) : (
                                'Duration not available'
                              )}
                            </div>
                            <div className="h-px w-16 bg-gray-300 my-2 mx-auto"></div>
                            <div className="text-xs text-gray-500">
                              {segment.aircraft?.name || segment.aircraft?.code || 'Flight'}
                            </div>
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <p className="text-sm font-medium text-gray-900">Arrival</p>
                          <p className="text-2xl font-bold">
                            {formatDateTime(segment.arrival)}
                          </p>
                          <p className="text-sm text-gray-600">
                            {segment.destination?.name}
                            {segment.destination?.terminal && ` • Terminal ${segment.destination.terminal}`}
                          </p>
                        </div>
                      </div>
                      
                      {segment.operatingCarrier && 
                       segment.operatingCarrier.iataCode !== segment.carrierCode && (
                        <div className="mt-2 text-xs text-gray-500">
                          Operated by {segment.operatingCarrier.name} ({segment.operatingCarrier.iataCode})
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {booking.trip?.price && (
              <div className="bg-gray-50 px-6 py-4 border-t border-gray-100">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium text-gray-900">Total Price</span>
                  <span className="text-lg font-bold text-gray-900">
                    {formatAmount(booking.trip.price.total, booking.trip.price.currency)}
                  </span>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Passenger Information */}
        {booking.passengers && booking.passengers.length > 0 && (
          <div className="bg-white rounded-xl shadow-md overflow-hidden mb-8">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-medium text-gray-900">Passenger Information</h2>
            </div>
            
            <div className="divide-y divide-gray-100">
              {booking.passengers.map((passenger: any, index: number) => (
                <div key={`passenger-${index}`} className="p-6">
                  <div className="flex items-start">
                    <div className="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
                      <FiUser className="h-5 w-5" />
                    </div>
                    <div className="ml-4 flex-1">
                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                        <h3 className="text-lg font-medium text-gray-900">
                          {passenger.firstName} {passenger.lastName}
                        </h3>
                        <span className="mt-1 sm:mt-0 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {passenger.type === 'adult' ? 'Adult' : passenger.type === 'child' ? 'Child' : 'Infant'}
                        </span>
                      </div>
                      
                      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {passenger.email && (
                          <div className="flex items-start">
                            <FiMail className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Email</p>
                              <p className="text-sm font-medium text-gray-900">{passenger.email}</p>
                            </div>
                          </div>
                        )}
                        
                        {passenger.phone && (
                          <div className="flex items-start">
                            <FiPhone className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Phone</p>
                              <p className="text-sm font-medium text-gray-900">{passenger.phone}</p>
                            </div>
                          </div>
                        )}
                        
                        {passenger.dateOfBirth && (
                          <div className="flex items-start">
                            <FiCalendar className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Date of Birth</p>
                              <p className="text-sm font-medium text-gray-900">
                                {new Date(passenger.dateOfBirth).toLocaleDateString('en-US', {
                                  year: 'numeric',
                                  month: 'long',
                                  day: 'numeric',
                                })}
                              </p>
                            </div>
                          </div>
                        )}
                        
                        {passenger.documentNumber && (
                          <div className="flex items-start">
                            <FiCreditCard className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Passport</p>
                              <p className="text-sm font-medium text-gray-900">
                                {passenger.documentNumber}
                                {passenger.documentIssuingCountryCode && (
                                  <span className="ml-2 text-gray-500">
                                    ({passenger.documentIssuingCountryCode})
                                  </span>
                                )}
                              </p>
                            </div>
                          </div>
                        )}
                        
                        {passenger.documentNationality && (
                          <div className="flex items-start">
                            <FiGlobe className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Nationality</p>
                              <p className="text-sm font-medium text-gray-900">
                                {passenger.documentNationality}
                              </p>
                            </div>
                          </div>
                        )}
                        
                        {passenger.gender && (
                          <div className="flex items-start">
                            <FiUser className="h-5 w-5 text-gray-400 mr-2 flex-shrink-0 mt-0.5" />
                            <div>
                              <p className="text-sm text-gray-500">Gender</p>
                              <p className="text-sm font-medium text-gray-900">
                                {passenger.gender === 'm' ? 'Male' : passenger.gender === 'f' ? 'Female' : 'Other'}
                              </p>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="bg-gray-50 px-6 py-4 border-t border-gray-100">
              <p className="text-sm text-gray-500">
                Need to update any details? Please contact our support team for assistance.
              </p>
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
          <button
            onClick={() => router.push('/')}
            className="px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Back to Home
          </button>
          <button
            onClick={() => window.print()}
            className="px-6 py-3 border border-gray-300 text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Print Itinerary
          </button>
        </div>
      </div>
    </div>
  );
}
