// app/components/TripCard.tsx
"use client";

import React, { useMemo } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useTripCart } from './TripCartContext';
import { FaPlane, FaClock } from 'react-icons/fa';

// Types
type Airport = {
  iataCode: string;
  at: string;
  terminal?: string;
  city?: string;
  name?: string;
};

type FlightSegment = {
  id: string;
  departure: Airport;
  arrival: Airport;
  carrierCode: string;
  number: string;
  duration: string;
  aircraft: {
    code: string;
    name?: string;
  };
  operating?: {
    carrierCode: string;
    name?: string;
  };
  cabinClass?: string;
  bookingCode?: string;
  stopCount?: number;
};

type Itinerary = {
  id: string;
  duration: string;
  segments: FlightSegment[];
  departure: Airport;
  arrival: Airport;
  stopCount: number;
};

type Price = {
  amount: string;
  currency: string;
  formatted: string;
};

type FlightOffer = {
  id: string;
  price: Price;
  itineraries: Itinerary[];
  bookingToken?: string;
  deepLink?: string;
  lastTicketingDate?: string;
  fareBasis?: string[];
  fareCategory?: string;
  includedCheckedBags?: {
    quantity: number;
  };
  isRefundable?: boolean;
  isChangeable?: boolean;
};

type SearchParams = {
  origin: string;
  destination: string;
  departureDate: string;
  returnDate?: string;
  tripType: 'oneway' | 'roundtrip' | 'multicity';
  adults: number;
  children?: number;
  infants?: number;
  cabinClass?: string;
  currency?: string;
  maxStops?: number;
};

interface TripCardProps {
  offer: FlightOffer;
  searchParams: SearchParams;
  flightType?: 'outbound' | 'return';
  onSelect?: (offer: FlightOffer) => void;
  selected?: boolean;
  className?: string;
}

// Helper functions
const formatDuration = (duration: string): string => {
  if (!duration) return '';
  
  // Handle ISO 8601 duration format (e.g., PT2H30M)
  const matches = duration.match(/PT(\d+H)?(\d+M)?/);
  if (!matches) return duration;
  
  const hours = matches[1] ? parseInt(matches[1]) : 0;
  const minutes = matches[2] ? parseInt(matches[2]) : 0;
  
  const parts = [];
  if (hours > 0) parts.push(`${hours}h`);
  if (minutes > 0 || hours === 0) parts.push(`${minutes}m`);
  
  return parts.join(' ');
};

const formatTime = (dateString: string): string => {
  if (!dateString) return '';
  return new Date(dateString).toLocaleTimeString([], { 
    hour: '2-digit', 
    minute: '2-digit',
    hour12: false
  });
};

const formatDate = (dateString: string): string => {
  if (!dateString) return '';
  return new Date(dateString).toLocaleDateString([], { 
    weekday: 'short', 
    month: 'short', 
    day: 'numeric' 
  });
};

const calculateLayover = (arrival: string, departure: string): string => {
  if (!arrival || !departure) return '';
  
  try {
    const arrivalTime = new Date(arrival).getTime();
    const departureTime = new Date(departure).getTime();
    const diffMs = departureTime - arrivalTime;
    
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    const parts = [];
    if (hours > 0) parts.push(`${hours}h`);
    if (minutes > 0 || hours === 0) parts.push(`${minutes}m`);
    
    return parts.join(' ');
  } catch (error) {
    console.error('Error calculating layover:', error);
    return '';
  }
};

const getAirlineLogo = (carrierCode: string): string => {
  return `https://content.airhex.com/content/logos/airlines_${carrierCode}_100_50_r.png`;
};

const TripCard: React.FC<TripCardProps> = ({
  offer,
  searchParams,
  flightType = 'outbound',
  onSelect,
  selected = false,
  className = ''
}) => {
  const router = useRouter();
  const { setTrip } = useTripCart();
  
  // Get the relevant itinerary based on flight type
  const itinerary = useMemo(() => {
    if (!offer?.itineraries?.length) return null;
    return flightType === 'return' && offer.itineraries.length > 1
      ? offer.itineraries[1]
      : offer.itineraries[0];
  }, [offer, flightType]);

  if (!itinerary || !itinerary.segments?.length) {
    return <div className={`p-4 border rounded-lg bg-gray-50 ${className}`}>No flight data available</div>;
  }

  const firstSegment = itinerary.segments[0];
  const lastSegment = itinerary.segments[itinerary.segments.length - 1];
  const hasStopover = itinerary.segments.length > 1;
  const airlineCode = firstSegment.operating?.carrierCode || firstSegment.carrierCode;
  const airlineNumber = firstSegment.number;
  const departureTime = formatTime(firstSegment.departure.at);
  const arrivalTime = formatTime(lastSegment.arrival.at);
  const departureDate = formatDate(firstSegment.departure.at);
  const arrivalDate = formatDate(lastSegment.arrival.at);
  const duration = formatDuration(itinerary.duration);
  const price = offer.price?.formatted || `${offer.price?.currency} ${offer.price?.amount}`;

  const handleSelect = (e: React.MouseEvent) => {
    e.stopPropagation();
    onSelect?.(offer);
  };

  const handleBookNow = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    // Save to trip context if needed
    if (setTrip) {
      setTrip({
        ...offer,
        searchParams
      });
    }
    
    // Navigate to booking page
    router.push(`/booking?offerId=${offer.id}`);
  };

  const handleDetailsClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    // Handle details click (e.g., open a modal with more details)
    console.log('Viewing details for flight:', offer.id);
  };

  return (
    <div 
      className={`border rounded-lg overflow-hidden bg-white shadow-sm hover:shadow-md transition-shadow ${
        selected ? 'ring-2 ring-blue-500' : ''
      } ${className}`}
      onClick={handleSelect}
    >
      {/* Header with airline and price */}
      <div className="p-4 border-b flex justify-between items-center">
        <div className="flex items-center space-x-3">
          {airlineCode && (
            <div className="relative w-10 h-10">
              <Image
                src={getAirlineLogo(airlineCode)}
                alt={`${airlineCode} logo`}
                fill
                className="object-contain"
                unoptimized
              />
            </div>
          )}
          <div>
            <div className="font-medium">{airlineCode} {airlineNumber}</div>
            <div className="text-sm text-gray-500">
              {flightType === 'return' ? 'Return' : 'Outbound'}
            </div>
          </div>
        </div>
        <div className="text-right">
          <div className="text-xl font-bold text-blue-600">{price}</div>
          <div className="text-sm text-gray-500">{offer.price?.currency} per person</div>
        </div>
      </div>

      {/* Flight summary */}
      <div className="p-4">
        <div className="flex justify-between items-center mb-4">
          <div className="text-center">
            <div className="text-2xl font-bold">{departureTime}</div>
            <div className="text-sm text-gray-500">{firstSegment.departure.iataCode}</div>
            <div className="text-xs text-gray-400">{departureDate}</div>
          </div>
          
          <div className="flex-1 px-4">
            <div className="relative">
              <div className="h-px bg-gray-300 w-full absolute top-1/2"></div>
              <div className="flex justify-between text-xs text-gray-500 mt-4">
                <span>{duration}</span>
                {hasStopover && (
                  <span className="bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full">
                    {itinerary.segments.length - 1} stop{itinerary.segments.length > 2 ? 's' : ''}
                  </span>
                )}
              </div>
            </div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold">{arrivalTime}</div>
            <div className="text-sm text-gray-500">{lastSegment.arrival.iataCode}</div>
            <div className="text-xs text-gray-400">{arrivalDate}</div>
          </div>
        </div>

        {/* Flight details */}
        <div className="space-y-3 mt-4">
          {itinerary.segments.map((segment, index) => (
            <div key={segment.id || index} className="border-t pt-3">
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center">
                  <FaPlane className="text-blue-500 mr-2" />
                  <span className="font-medium">
                    {segment.departure.iataCode} â†’ {segment.arrival.iataCode}
                  </span>
                </div>
                <span className="text-gray-500">{formatDuration(segment.duration)}</span>
              </div>
              
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                <span>{segment.aircraft.name || `Aircraft ${segment.aircraft.code}`}</span>
                <span>Flight {segment.carrierCode}{segment.number}</span>
              </div>
              
              {index < itinerary.segments.length - 1 && (
                <div className="mt-2 pt-2 border-t border-gray-100 text-xs text-gray-500 flex items-center">
                  <FaClock className="mr-1" />
                  <span>
                    {calculateLayover(segment.arrival.at, itinerary.segments[index + 1].departure.at)} layover in {segment.arrival.iataCode}
                  </span>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Footer with action buttons */}
      <div className="p-4 bg-gray-50 border-t flex justify-end space-x-3">
        <button 
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border rounded-md hover:bg-gray-50"
          onClick={handleDetailsClick}
        >
          Details
        </button>
        <button 
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
          onClick={handleBookNow}
        >
          Book Now
        </button>
      </div>
    </div>
  );
};

export default TripCard;
