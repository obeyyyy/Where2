'use client';

import React, { useState, useEffect } from 'react';
import { DuffelAncillaries } from '@duffel/components';
import { AncillaryState, AncillaryRow } from '@/types/Ancillary';

interface DuffelAncillariesComponentProps {
  offerId: string;
  passengers: any[];
  onAncillariesSelected: (ancillaryState: AncillaryState) => void;
}

const DuffelAncillariesComponent: React.FC<DuffelAncillariesComponentProps> = ({
  offerId,
  passengers,
  onAncillariesSelected,
}) => {
  const [clientKey, setClientKey] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch client key from the API
  useEffect(() => {
    const fetchClientKey = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/ancillaries/client-key?offerId=${offerId}`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch client key: ${response.status}`);
        }
        
        const data = await response.json();
        if (!data.client_key) {
          throw new Error('Client key not found in response');
        }
        
        setClientKey(data.client_key);
        setError(null);
      } catch (err) {
        console.error('Error fetching client key:', err);
        setError(err instanceof Error ? err.message : 'Unknown error fetching client key');
      } finally {
        setLoading(false);
      }
    };

    if (offerId) {
      fetchClientKey();
    }
  }, [offerId]);

  // Handle ancillary selection
  const handlePayloadReady = (data: any, metadata: any) => {
    console.log('🔍 DEBUG - Ancillaries selected. Order payload:', data);
    console.log('🔍 DEBUG - Ancillaries selected. Metadata:', metadata);
    console.log('🔍 DEBUG - Payload services:', data?.services);

    // Process selected ancillaries
    const selectedAncillaries: AncillaryRow[] = [];
    let totalAmount = 0;
    let currency = metadata?.offer_total_currency || 'EUR'; // Get currency from metadata
    
    // Process all selected services directly from the payload
    if (data?.services && Array.isArray(data.services) && data.services.length > 0) {
      console.log('🔍 DEBUG - Processing services from payload:', data.services.length);
      
      data.services.forEach((service: any) => {
        if (service && service.id) {
          // Extract amount and currency from the payload
          let amount = 0;
          
          // Try to get the amount
          if (service.amount && !isNaN(parseFloat(service.amount))) {
            amount = parseFloat(service.amount);
          } else if (service.quantity && service.price && !isNaN(parseFloat(service.price))) {
            amount = parseFloat(service.price) * service.quantity;
          }
          
          console.log('🔍 DEBUG - Service from payload:', {
            id: service.id,
            amount,
            currency: service.currency || currency
          });
          
          // Find more details in metadata
          let serviceType = 'extra';
          let serviceTitle = 'Extra Service';
          let serviceDetails = '';
          let passengerId = '';
          let passengerName = '';
          
          // Look for this service in baggage services
          const baggageService = metadata?.baggage_services?.find((bs: any) => bs.id === service.id);
          if (baggageService) {
            serviceType = 'baggage';
            serviceTitle = `${baggageService.type === 'checked' ? 'Checked Baggage' : 'Carry-on Baggage'} ${
              baggageService.serviceInformation?.maximum_weight_kg ? 
              `(${baggageService.serviceInformation.maximum_weight_kg}kg)` : 
              ''
            }`;
            serviceDetails = `${baggageService.quantity || 1}x ${baggageService.type} baggage`;
            passengerId = baggageService.passengerIds?.[0] || '';
            passengerName = baggageService.passengerName || getPassengerName(baggageService.passengerIds?.[0]);
          }
          
          // Look for this service in seat services
          const seatService = metadata?.seat_services?.find((ss: any) => ss.id === service.id);
          if (seatService) {
            serviceType = 'seat';
            serviceTitle = `Seat ${seatService.designator || ''}`;
            serviceDetails = seatService.cabin_class || 'Selected seat';
            passengerId = seatService.passengerIds?.[0] || '';
            passengerName = seatService.passengerName || getPassengerName(seatService.passengerIds?.[0]);
          }
          
          // Look for this service in CFAR services
          const cfarService = metadata?.cancel_for_any_reason_services?.find((cs: any) => cs.id === service.id);
          if (cfarService) {
            serviceType = 'cfar';
            serviceTitle = 'Cancel For Any Reason';
            serviceDetails = 'Flight cancellation protection';
            passengerId = cfarService.passengerIds?.[0] || '';
            passengerName = cfarService.passengerName || getPassengerName(cfarService.passengerIds?.[0]);
          }
          
          // Add to total if we have a valid amount
          if (amount > 0) {
            totalAmount += amount;
            console.log('🔍 DEBUG - Adding to total:', amount, 'New total:', totalAmount);
            
            // Create an AncillaryRow for this service
            const ancillaryRow = {
              id: service.id,
              title: serviceTitle,
              details: serviceDetails,
              amount: amount,
              currency: service.currency || currency,
              passengerId: passengerId,
              passengerName: passengerName,
              segmentIds: service.segment_ids || [],
              segmentInfo: ''
            };
            
            console.log('🔍 DEBUG - Created ancillary row:', ancillaryRow);
            selectedAncillaries.push(ancillaryRow);
          }
        }
      });
    } else {
      console.log('🔍 DEBUG - No services found in payload, trying metadata');
      
      // Fallback to processing from metadata
      // Process baggage services
      if (metadata?.baggage_services && metadata.baggage_services.length > 0) {
        console.log('🔍 DEBUG - Processing baggage services from metadata:', metadata.baggage_services.length);
        
        metadata.baggage_services.forEach((service: any) => {
          if (service) {
            // Try to get the amount from total_amount
            let amount = 0;
            if (service.total_amount && !isNaN(parseFloat(service.total_amount))) {
              amount = parseFloat(service.total_amount);
            } else {
              // Fallback to a default amount
              amount = 25; // Default price for baggage
            }
            
            const serviceCurrency = service.total_currency || currency;
            
            // Add to total
            totalAmount += amount;
            
            // Create an AncillaryRow for the baggage service
            const ancillaryRow = {
              id: service.id || `baggage_${selectedAncillaries.length}`,
              title: `${service.type === 'checked' ? 'Checked Baggage' : 'Carry-on Baggage'} ${
                service.serviceInformation?.maximum_weight_kg ? 
                `(${service.serviceInformation.maximum_weight_kg}kg)` : 
                ''
              }`,
              details: `${service.quantity || 1}x ${service.type} baggage`,
              amount: amount,
              currency: serviceCurrency,
              passengerId: service.passengerIds?.[0] || '',
              passengerName: service.passengerName || getPassengerName(service.passengerIds?.[0]),
              segmentIds: service.segmentIds || [],
              segmentInfo: ''
            };
            
            console.log('🔍 DEBUG - Created baggage ancillary row from metadata:', ancillaryRow);
            selectedAncillaries.push(ancillaryRow);
          }
        });
      }
      
      // Process other service types similarly...
    }

    // Create ancillary state
    const ancillaryState: AncillaryState = {
      rows: selectedAncillaries,
      total: totalAmount,
      currency: currency
    };

    console.log('🔍 DEBUG - Final ancillary state:', ancillaryState);
    console.log('🔍 DEBUG - Selected ancillaries count:', selectedAncillaries.length);
    console.log('🔍 DEBUG - Total amount:', totalAmount);

    // Pass selected ancillaries to parent component
    onAncillariesSelected(ancillaryState);
    console.log('🔍 DEBUG - Called onAncillariesSelected with state');
  };

  // Helper function to get passenger name from ID
  const getPassengerName = (passengerId: string): string => {
    if (!passengerId || !passengers) return '';
    
    const passenger = passengers.find(p => p.id === passengerId);
    if (!passenger) return '';
    
    return `${passenger.title || ''} ${passenger.firstName || passenger.given_name || ''} ${passenger.lastName || passenger.family_name || ''}`.trim();
  };

  // Define markup for ancillaries
  const markup = {
    bags: {
      amount: 1, // Add 1.00 to the price of each bag
      rate: 0.02, // Also add 2% to the price of each bag
    },
    seats: {
      amount: 2, // Add 2.00 to the price of each seat
      rate: 0, // Don't add any percentage markup
    },
    cancel_for_any_reason: {
      amount: 0, // Don't add any amount markup
      rate: 0.25, // Add 25% to Cancel For Any Reason
    },
  };

  if (loading) {
    return <div className="p-4 text-center">Loading ancillaries...</div>;
  }

  if (error) {
    return <div className="p-4 text-center text-red-500">Error: {error}</div>;
  }

  if (!clientKey) {
    return <div className="p-4 text-center">Unable to load ancillaries component</div>;
  }

  return (
    <div className="w-full">
      <h2 className="text-xl font-semibold mb-4">Additional Services</h2>
      <div className="border rounded-lg overflow-hidden">
        <DuffelAncillaries
          debug={false}
          offer_id={offerId}
          client_key={clientKey}
          services={['bags', 'seats', 'cancel_for_any_reason']}
          passengers={passengers}
          markup={markup}
          onPayloadReady={handlePayloadReady}
        />
      </div>
    </div>
  );
};

export default DuffelAncillariesComponent;
